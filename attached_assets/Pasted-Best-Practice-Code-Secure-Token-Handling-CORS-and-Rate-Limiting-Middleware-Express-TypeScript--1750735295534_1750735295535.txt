Best-Practice Code: Secure Token Handling, CORS, and Rate Limiting Middleware (Express/TypeScript)

1. JWT Token Verification Middleware (Express/TypeScript)
Add to server/middleware/verifyJwt.ts:

ts
Copy
Edit
import { Request, Response, NextFunction } from "express";
import jwt from "jsonwebtoken";

const JWT_SECRET = process.env.JWT_SECRET || "change_this_secret";

export function verifyJwt(req: Request, res: Response, next: NextFunction) {
  const token = req.headers.authorization?.replace("Bearer ", "");
  if (!token) return res.status(401).json({ error: "No auth token" });
  try {
    const payload = jwt.verify(token, JWT_SECRET);
    (req as any).user = payload;
    next();
  } catch (e) {
    res.status(401).json({ error: "Invalid or expired token" });
  }
}
Usage:
Add verifyJwt to any secure route.

2. Robust CORS Middleware (With Whitelist & Preflight)
Add to server/middleware/cors.ts:

ts
Copy
Edit
import { Request, Response, NextFunction } from "express";

const whitelist = [
  "https://your-production-domain.com",
  "https://staging.yourdomain.com",
  "http://localhost:5173"
];

export function secureCors(req: Request, res: Response, next: NextFunction) {
  const origin = req.headers.origin;
  if (origin && whitelist.includes(origin)) {
    res.header("Access-Control-Allow-Origin", origin);
    res.header("Vary", "Origin");
  }
  res.header("Access-Control-Allow-Credentials", "true");
  res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept, Authorization");
  res.header("Access-Control-Allow-Methods", "GET,POST,PUT,PATCH,DELETE,OPTIONS");
  if (req.method === "OPTIONS") return res.sendStatus(204);
  next();
}
Usage:
Use as the first middleware in your server before routes.

3. Express Rate Limiting Middleware (with Redis Backend)
Add to server/middleware/rateLimiter.ts:

ts
Copy
Edit
import rateLimit from "express-rate-limit";
import RedisStore from "rate-limit-redis";
import Redis from "ioredis";

const redisClient = new Redis(process.env.REDIS_URL!);

export const secureRateLimiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 100, // max requests per window per IP
  message: { error: "Too many requests, slow down." },
  standardHeaders: true,
  legacyHeaders: false,
  store: new RedisStore({
    sendCommand: (...args: string[]) => redisClient.call(...args)
  }),
});
Usage:
Apply to all routes or sensitive endpoints:

ts
Copy
Edit
app.use(secureRateLimiter);
