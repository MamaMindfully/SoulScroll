import { useEffect, useRef } from 'react'
import * as d3 from 'd3'

export default function InsightGraph({ data }) {
  const svgRef = useRef()

  useEffect(() => {
    if (!data?.nodes) return

    const width = 800, height = 600
    const svg = d3.select(svgRef.current)
      .attr('viewBox', [0, 0, width, height])
      .style('background', '#0b0c10')
      .style('border-radius', '12px')

    svg.selectAll('*').remove()

    const simulation = d3.forceSimulation(data.nodes)
      .force('link', d3.forceLink(data.edges).id(d => d.id).distance(80))
      .force('charge', d3.forceManyBody().strength(-150))
      .force('center', d3.forceCenter(width / 2, height / 2))

    const link = svg.append('g')
      .attr('stroke', '#999').attr('stroke-opacity', 0.4)
      .selectAll('line')
      .data(data.edges)
      .join('line')
      .attr('stroke-width', 1.5)

    const node = svg.append('g')
      .attr('stroke', '#fff').attr('stroke-width', 1.5)
      .selectAll('circle')
      .data(data.nodes)
      .join('circle')
      .attr('r', 8)
      .attr('fill', d => themeColor(d.theme))
      .call(drag(simulation))

    node.append('title').text(d => d.label)

    simulation.on('tick', () => {
      link
        .attr('x1', d => d.source.x)
        .attr('y1', d => d.source.y)
        .attr('x2', d => d.target.x)
        .attr('y2', d => d.target.y)

      node
        .attr('cx', d => d.x)
        .attr('cy', d => d.y)
    })

    function drag(sim) {
      function dragstarted(event, d) {
        if (!event.active) sim.alphaTarget(0.3).restart()
        d.fx = d.x
        d.fy = d.y
      }
      function dragged(event, d) {
        d.fx = event.x
        d.fy = event.y
      }
      function dragended(event, d) {
        if (!event.active) sim.alphaTarget(0)
        d.fx = null
        d.fy = null
      }
      return d3.drag().on('start', dragstarted).on('drag', dragged).on('end', dragended)
    }

    function themeColor(theme) {
      const palette = {
        'grief': '#8b5cf6',
        'joy': '#10b981',
        'control': '#f59e0b',
        'identity': '#ec4899',
        'release': '#38bdf8',
      }
      return palette[theme] || '#f3f4f6'
    }
  }, [data])

  return <svg ref={svgRef} className="w-full h-[600px]"></svg>
}
