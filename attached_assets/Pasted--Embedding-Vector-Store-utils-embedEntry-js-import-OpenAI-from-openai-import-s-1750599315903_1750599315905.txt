// === ðŸ§  Embedding Vector Store ===
// utils/embedEntry.js
import { OpenAI } from 'openai'
import supabase from './db'

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY })

export async function embedEntry({ entryId, content, userId }) {
  const embeddingRes = await openai.embeddings.create({
    model: 'text-embedding-ada-002',
    input: content
  })

  const embedding = embeddingRes.data[0].embedding

  await supabase.from('journal_embeddings').insert([
    { user_id: userId, entry_id: entryId, embedding }
  ])
}

// Supabase schema
/*
create table journal_embeddings (
  id uuid primary key default gen_random_uuid(),
  user_id uuid references users(id) on delete cascade,
  entry_id uuid references journal_entries(id),
  embedding vector(1536),
  created_at timestamp default now()
);
*/


// === ðŸ“¥ Feedback Buttons on Insights ===
// components/InsightFeedback.jsx
import { useState } from 'react'

export default function InsightFeedback({ insightId }) {
  const [submitted, setSubmitted] = useState(false)

  const sendFeedback = async (rating) => {
    await fetch('/api/insight-feedback', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ insightId, rating })
    })
    setSubmitted(true)
  }

  if (submitted) return <p className="text-sm text-green-400">Thank you for your feedback!</p>

  return (
    <div className="flex space-x-4 mt-2">
      <button onClick={() => sendFeedback('helpful')} className="text-sm bg-green-700 px-3 py-1 rounded">Helpful</button>
      <button onClick={() => sendFeedback('not_helpful')} className="text-sm bg-gray-600 px-3 py-1 rounded">Not Helpful</button>
    </div>
  )
}

// Supabase table
/*
create table insight_feedback (
  id uuid primary key default gen_random_uuid(),
  insight_id uuid,
  user_id uuid,
  rating text,
  created_at timestamp default now()
);
*/


// === ðŸ“… Ritual Streaks Table ===
// utils/updateRitualStreak.js
export async function updateRitualStreak(userId) {
  const today = new Date().toISOString().split('T')[0]
  const { data: last } = await supabase
    .from('ritual_streaks')
    .select('last_day, count')
    .eq('user_id', userId)
    .single()

  const lastDay = last?.last_day || null
  const yesterday = new Date(Date.now() - 86400000).toISOString().split('T')[0]

  if (lastDay === yesterday) {
    await supabase.from('ritual_streaks').upsert({
      user_id: userId,
      last_day: today,
      count: last.count + 1
    })
  } else {
    await supabase.from('ritual_streaks').upsert({
      user_id: userId,
      last_day: today,
      count: 1
    })
  }
}

// Supabase table
/*
create table ritual_streaks (
  user_id uuid primary key references users(id) on delete cascade,
  count integer,
  last_day date
);
*/


// === ðŸ§¬ Life Arc Metadata ===
// utils/tagLifeArc.js
export async function tagLifeArc(entryId, userId, tag) {
  await supabase.from('life_arc_tags').insert({
    user_id: userId,
    entry_id: entryId,
    tag
  })
}

// Supabase schema
/*
create table life_arc_tags (
  id uuid primary key default gen_random_uuid(),
  user_id uuid references users(id) on delete cascade,
  entry_id uuid references journal_entries(id),
  tag text,
  created_at timestamp default now()
);
*/
